---
AWSTemplateFormatVersion: '2010-09-09'
Description: api

Parameters:

  lambdaArn:
    Type: String
    Default: "false"

  PathPart: 
    Type: String
    Default: "false"

Resources:
  api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Ref "AWS::StackName"
      FailOnWarnings: true

  apiResource:
    Type: "AWS::ApiGateway::Resource"
    DependsOn:
      - api
    Properties:
      RestApiId: !Ref api
      ParentId: !GetAtt api.RootResourceId
      PathPart: !Ref PathPart

  apiGatewayMethodOptions:
    Type: "AWS::ApiGateway::Method"
    DependsOn:
      - apiResource
    Properties:
      ResourceId: !Ref apiResource
      RestApiId: !Ref api
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
      -
        StatusCode: 200
        ResponseParameters:
          "method.response.header.Access-Control-Allow-Origin": true
          "method.response.header.Access-Control-Allow-Headers": true
          "method.response.header.Access-Control-Allow-Methods": true
          "method.response.header.Access-Control-Allow-Credentials": true
      Integration:
        Type: MOCK
        RequestTemplates:
          "application/json": "{statusCode:200}"
        IntegrationResponses:
          -
            StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Origin": "'*'"
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              "method.response.header.Access-Control-Allow-Credentials": "'false'"
            ResponseTemplates:
              "application/json": ""

  apiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn:
      - apiGatewayMethodOptions
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref apiResource
      RestApiId: !Ref api
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        RequestTemplates:
          "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
    
        PassthroughBehavior: NEVER
        Uri: !Join ["",["arn:aws:apigateway:",!Ref "AWS::Region",":lambda:path/2015-03-31/functions/",!Ref lambdaArn, "/invocations"]]
   
        IntegrationResponses:
          -
           StatusCode: 200
           SelectionPattern: ""
           ResponseParameters:
             "method.response.header.Access-Control-Allow-Origin": "'*'"
          -
           StatusCode: 400
           SelectionPattern: "[\\s\\S]*\\[400\\][\\s\\S]*"
           ResponseParameters:
             "method.response.header.Access-Control-Allow-Origin": "'*'"
          -
           StatusCode: 401
           SelectionPattern: "[\\s\\S]*\\[401\\][\\s\\S]*"
           ResponseParameters:
             "method.response.header.Access-Control-Allow-Origin": "'*'"
          -
           StatusCode: 403
           SelectionPattern: "[\\s\\S]*\\[403\\][\\s\\S]*"
           ResponseParameters:
             "method.response.header.Access-Control-Allow-Origin": "'*'"
          -
           StatusCode: 404
           SelectionPattern: "[\\s\\S]*\\[404\\][\\s\\S]*"
           ResponseParameters:
             "method.response.header.Access-Control-Allow-Origin": "'*'"
          -
           StatusCode: 422
           SelectionPattern: "[\\s\\S]*\\[422\\][\\s\\S]*"
           ResponseParameters:
             "method.response.header.Access-Control-Allow-Origin": "'*'"
          -
           StatusCode: 500
           SelectionPattern: "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
           ResponseParameters:
             "method.response.header.Access-Control-Allow-Origin": "'*'"
          -
           StatusCode: 502
           SelectionPattern: "[\\s\\S]*\\[502\\][\\s\\S]*"
           ResponseParameters:
             "method.response.header.Access-Control-Allow-Origin": "'*'"
          -
           StatusCode: 504
           SelectionPattern: "[\\s\\S]*\\[504\\][\\s\\S]*"
           ResponseParameters:
              "method.response.header.Access-Control-Allow-Origin": "'*'"
      MethodResponses:
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 200
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 400
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 401
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 403
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 404
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 422
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 500
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 502
        -
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            "method.response.header.Access-Control-Allow-Methods": "'*'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: 504


  apiDeployment:
    DependsOn: 
      - apiGatewayMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref api
      StageDescription:
        MethodSettings:
          - 
            HttpMethod: "*"
            ResourcePath: "/*"
            ThrottlingBurstLimit: 20
            ThrottlingRateLimit: 5
      StageName: stageTemp

  apiGatewayStageDev:
    DependsOn: 
      - apiDeployment
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref apiDeployment
      MethodSettings:
        -
          DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref api
      StageName: dev
  apiGatewayStageProd:
    DependsOn: 
      - apiDeployment
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref apiDeployment
      MethodSettings:
        -
          DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref api
      StageName: prod
  apiGatewayTest:
    DependsOn: 
      - apiDeployment
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref apiDeployment
      MethodSettings:
        -
          DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref api
      StageName: test

Outputs:
  apiRootResourceId:
    Value: !GetAtt api.RootResourceId
  apiId:
    Value: !Ref api
  apiMethodId:
    Value: !Ref apiGatewayMethodOptions
  apiResourceId:
    Value: !Ref apiResource
  apiDeploymentId:
    Value: !Ref apiDeployment



